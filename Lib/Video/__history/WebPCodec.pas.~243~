unit WebPCodec;

interface
uses Windows, System.SysUtils, Forms, Classes, Vcl.Dialogs;
const
  WEBP_ENCODER_ABI_VERSION : Integer = $020f;    // MAJOR(8b) + MINOR(8b)

type

TWebPImageHint = (
  WEBP_HINT_DEFAULT = 0,  // default preset.
  WEBP_HINT_PICTURE,      // digital picture, like portrait, inner shot
  WEBP_HINT_PHOTO,        // outdoor photograph, with natural lighting
  WEBP_HINT_GRAPH,        // Discrete tone image (graph, map-tile etc).
  WEBP_HINT_LAST
);

PWebPConfig = ^TWebPConfig;
TWebPConfig = record
    lossless: Integer;               // Lossless encoding (0=lossy(default), 1=lossless).
    quality: Single;            // between 0 (smallest file) and 100 (biggest)
    method: Integer;            // quality/speed trade-off (0=fast, 6=slower-better)

    image_hint: TWebPImageHint; // Hint for image type (lossless only for now).
    target_size: Integer;       // if non-zero, set the desired target size in bytes.
                                // Takes precedence over the 'compression' parameter.
    target_PSNR: Single;        // if non-zero, specifies the minimal distortion to
                                // try to achieve. Takes precedence over target_size.
    segments: Integer;          // maximum number of segments to use, in [1..4]
    sns_strength: Integer;      // Spatial Noise Shaping. 0=off, 100=maximum.
    filter_strength: Integer;   // range: [0 = off .. 100 = strongest]
    filter_sharpness: Integer;  // range: [0 = off .. 7 = least sharp]
    filter_type: Integer;       // filtering type: 0 = simple, 1 = strong
                                // (only used if filter_strength > 0 or autofilter > 0)
    autofilter: Integer;        // Auto adjust filter's strength [0 = off, 1 = on]
    alpha_compression: Integer; // Algorithm for encoding the alpha plane (0 = none,
                                // 1 = compressed with WebP lossless). Default is 1.
    alpha_filtering: Integer;   // Predictive filtering method for alpha plane.
                                //  0: none, 1: fast, 2: best. Default if 1.
    alpha_quality: Integer;     // Between 0 (smallest size) and 100 (lossless).

    pass: Integer;              // number of entropy-analysis passes (in [1..10]).

    show_compressed: Integer;   // if true, export the compressed picture back.
                                // In-loop filtering is not applied.
    preprocessing: Integer;     // preprocessing filter (0=none, 1=segment-smooth)
    partitions: Integer;        // log2(number of token partitions) in [0..3]
                                // Default is set to 0 for easier progressive decoding.
    partition_limit: Integer;    // quality degradation allowed to fit the 512k limit
                          // on prediction modes coding (0: no degradation,
                          // 100: maximum possible degradation).
    emulate_jpeg_size: Integer;  // If true, compression parameters will be remapped
                          // to better match the expected output size from
                          // JPEG compression. Generally, the output size will
                          // be similar but the degradation will be lower.
    thread_level: Integer;       // If non-zero, try and use multi-threaded encoding.
    low_memory: Integer;         // If set, reduce memory usage (but increase CPU use).

    near_lossless: Integer;      // Near lossless encoding [0 = max loss .. 100 = off
                          // (default)].
    exact: Integer;              // if non-zero, preserve the exact RGB values under
                          // transparent area. Otherwise, discard this invisible
                          // RGB information for better compression. The default
                          // value is 0.

    use_delta_palette: Integer;  // reserved for future lossless feature
    use_sharp_yuv: Integer;      // if needed, use sharp (and slow) RGB->YUV conversion

    qmin: Integer;               // minimum permissible quality factor
    qmax: Integer;               // maximum permissible quality factor
  end;

// Enumerate some predefined settings for WebPConfig, depending on the type
// of source picture. These presets are used when calling WebPConfigPreset().
TWebPPreset = (
    WEBP_PRESET_DEFAULT = 0,  // default preset.
    WEBP_PRESET_PICTURE,      // digital picture, like portrait, inner shot
    WEBP_PRESET_PHOTO,        // outdoor photograph, with natural lighting
    WEBP_PRESET_DRAWING,      // hand or line drawing, with high-contrast details
    WEBP_PRESET_ICON,         // small-sized colorful images
    WEBP_PRESET_TEXT          // text-like
);


PWebPAuxStats = ^TWebPAuxStats;
TWebPAuxStats = record
  coded_size: Integer;         // final size

  PSNR: array[0..4] of Single;          // peak-signal-to-noise ratio for Y/U/V/All/Alpha
  block_count: array[0..2] of Integer;     // number of intra4/intra16/skipped macroblocks
  header_bytes: array[0..1] of Integer;    // approximate number of bytes spent for header
                          // and mode-partition #0
  residual_bytes : array[0..2, 0..3] of Integer;  // approximate number of bytes spent for
                             // DC/AC/uv coefficients for each (0..3) segments.
  segment_size: array[0..3] of Integer;    // number of macroblocks in each segments
  segment_quant: array[0..3] of Integer;   // quantizer values for each segments
  segment_level: array[0..3] of Integer;   // filtering strength for each segments [0..63]

  alpha_data_size : Integer;    // size of the transparency data
  layer_data_size : Integer;    // size of the enhancement layer data

  // lossless encoder statistics
  lossless_features : Cardinal;  // bit0:predictor bit1:cross-color transform
                               // bit2:subtract-green bit3:color indexing
  histogram_bits : Integer;          // number of precision bits of histogram
  transform_bits : Integer;          // precision bits for transform
  cache_bits : Integer;              // number of bits for color cache lookup
  palette_size : Integer;            // number of color in palette, if used
  lossless_size : Integer;           // final lossless size
  lossless_hdr_size : Integer;       // lossless header (transform, huffman etc) size
  lossless_data_size : Integer;      // lossless image data size

  pad: array[0..1] of Cardinal;        // padding for later use
end;

// Color spaces.
TWebPEncCSP = (
  // chroma sampling
  WEBP_YUV420  = 0,        // 4:2:0
  WEBP_YUV420A = 4,        // alpha channel variant
  WEBP_CSP_UV_MASK = 3,    // bit-mask to get the UV sampling factors
  WEBP_CSP_ALPHA_BIT = 4   // bit that is set if alpha is present
);

// WebPMemoryWrite: a special WebPWriterFunction that writes to memory using
// the following WebPMemoryWriter object (to be set as a custom_ptr).
TWebPMemoryWriter = record
  mem: PByte;       // final buffer (of size 'max_size', larger than 'size').
  size, max_size: size_t;      // final size, total capacity
  pad : array [0..0] of Cardinal;    // padding for later use
end;


PWebPPicture = ^TWebPPicture;
// Signature for output function. Should return true if writing was successful.
// data/data_size is the segment of data to write, and 'picture' is for
// reference (and so one can make use of picture->custom_ptr).
TWebPWriterFunction = function (const data : PByte; data_size : size_t; //Cardinal
                                  const picture : PWebPPicture) : Integer; cdecl;

// Encoding error conditions.
TWebPEncodingError = (
  VP8_ENC_OK = 0,
  VP8_ENC_ERROR_OUT_OF_MEMORY,            // memory error allocating objects
  VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY,  // memory error while flushing bits
  VP8_ENC_ERROR_NULL_PARAMETER,           // a pointer parameter is NULL
  VP8_ENC_ERROR_INVALID_CONFIGURATION,    // configuration is invalid
  VP8_ENC_ERROR_BAD_DIMENSION,            // picture has invalid width/height
  VP8_ENC_ERROR_PARTITION0_OVERFLOW,      // partition is bigger than 512k
  VP8_ENC_ERROR_PARTITION_OVERFLOW,       // partition is bigger than 16M
  VP8_ENC_ERROR_BAD_WRITE,                // error while flushing bytes
  VP8_ENC_ERROR_FILE_TOO_BIG,             // file is bigger than 4G
  VP8_ENC_ERROR_USER_ABORT,               // abort request by user
  VP8_ENC_ERROR_LAST                      // list terminator. always last.
);

// Progress hook, called from time to time to report progress. It can return
// false to request an abort of the encoding process, or true otherwise if
// everything is OK.
TWebPProgressHook = function (percent: Integer; const picture: PWebPPicture): Integer;

TWebPPicture = record
  //   INPUT
  //////////////
  // Main flag for encoder selecting between ARGB or YUV input.
  // It is recommended to use ARGB input (*argb, argb_stride) for lossless
  // compression, and YUV input (*y, *u, *v, etc.) for lossy compression
  // since these are the respective native colorspace for these formats.
  use_argb: Integer;

  // YUV input (mostly used for input to lossy compression)
  colorspace: TWebPEncCSP;     // colorspace: should be YUV420 for now (=Y'CbCr).
  width, height: Integer;         // dimensions (less or equal to WEBP_MAX_DIMENSION)
  y, u, v : PByte;        // pointers to luma/chroma planes.
  y_stride, uv_stride: Integer;   // luma/chroma strides.
  a: PByte;                // pointer to the alpha plane
  a_stride: Integer;              // stride of the alpha plane
  pad1: array [0..1] of Cardinal;          // padding for later use

  // ARGB input (mostly used for input to lossless compression)
  argb : PCardinal;            // Pointer to argb (32 bit) plane.
  argb_stride: Integer;           // This is stride in pixels units, not bytes.
  pad2: array [0..2] of Cardinal;          // padding for later use

  //   OUTPUT
  ///////////////
  // Byte-emission hook, to store compressed bytes as they are ready.
  writer: TWebPWriterFunction;  // can be NULL
  custom_ptr: Pointer;           // can be used by the writer.

  // map for extra information (only for lossy compression mode)
  extra_info_type: Integer;    // 1: intra type, 2: segment, 3: quant
                          // 4: intra-16 prediction mode,
                          // 5: chroma prediction mode,
                          // 6: bit cost, 7: distortion
  extra_info: PByte;    // if not NULL, points to an array of size
                          // ((width + 15) / 16) * ((height + 15) / 16) that
                          // will be filled with a macroblock map, depending
                          // on extra_info_type.

  //   STATS AND REPORTS
  ///////////////////////////
  // Pointer to side statistics (updated only if not NULL)
  stats: PWebPAuxStats;

  // Error code for the latest error encountered during encoding
  error_code: TWebPEncodingError;

  // If not NULL, report progress during encoding.
  progress_hook: TWebPProgressHook;

  user_data: Pointer;        // this field is free to be set to any value and
                          // used during callbacks (like progress-report e.g.).

  pad3: array [0..2] of Cardinal;       // padding for later use

  // Unused for now
  pad4, pad5: PByte;
  pad6: array [0..7] of Cardinal;       // padding for later use

  // PRIVATE FIELDS
  ////////////////////
  memory_ : Pointer;          // row chunk of memory for yuva planes
  memory_argb_ : Pointer;     // and for argb too.
  pad7: array [0..1] of Pointer;          // padding for later use
end;

TWebPConfigInitInternalFunc = function(config : PWebPConfig; preset: TWebPPreset;
  quality: Single; Encoder : Integer): Integer; cdecl;
//TWebPValidateConfigFunc = function (const config: PWebPConfig): Integer; cdecl;

TWebPPictureInitInternalFunc = function (picture: PWebPPicture; Encoder : Integer): Integer; cdecl;
//TWebPPictureAllocFunc = function(picture: PWebPPicture): Integer; cdecl;
//TWebPPictureFreeFunc = procedure(picture: PWebPPicture); cdecl;
TWebPMemoryWriteFunc = function (const data: PByte; data_size: size_t;
                                const picture: PWebPPicture) : Integer; cdecl;
TWebPPictureImportRGBAFunc = function(picture: PWebPPicture; const rgb: PByte;
  rgb_stride: Integer) : Integer; cdecl;
TWebPPictureFreeFunc = procedure (picture: PWebPPicture); cdecl;

TWebPEncodeFunc = function (const config: PWebPConfig; picture: PWebPPicture): Integer; cdecl;
TWebPDecodeRGBAIntoFunc = function (const data: PByte; data_size: size_t;
                           output: PByte; size: size_t; stride: Integer) : PByte; cdecl;
//TWebPDecodeRGBAFunc = function (const data : PByte; data_size : size_t;
//                                   width, height : PInteger) : PByte; cdecl;


TWebPCodec = class
private
class var
  DLL : HMODULE;

  WebPConfigInitInternal: TWebPConfigInitInternalFunc;
  WebPPictureInitInternal: TWebPPictureInitInternalFunc;
  WebPMemoryWrite: TWebPMemoryWriteFunc;
  WebPPictureImportRGBA: TWebPPictureImportRGBAFunc;
  WebPPictureFree : TWebPPictureFreeFunc;
  WebPEncode: TWebPEncodeFunc;
  WebPDecodeRGBAInto : TWebPDecodeRGBAIntoFunc;
  //WebPDecodeRGB : TWebPDecodeRGBFunc;

  Cfg : TWebPConfig;
  Pic : TWebPPicture;
  MemWr : TWebPMemoryWriter;

  class procedure Create;
  class procedure Destroy;

//  class function GetComprData : PByte; static;

public

  class procedure SetComprParams(Quality : Single; ComprMethod : Integer);
  class function CompressImage(const RGB : PByte;
    IWidth, IHeight, IStride: Integer;
    var Output : PByte; var MaxOutputSize: Integer): Integer;
  class procedure DeCompressImage(const Data: PByte; DataSize: size_t;
                           Output: PByte; Size: size_t; Stride: Integer);

 // class property ComprData : PByte read GetComprData;
end;

implementation

class procedure TWebPCodec.Create;
begin
  DLL := LoadLibraryW(PWideChar(ExtractFilePath(Application.ExeName) + 'libwebp_debug.dll'));
  Assert(DLL <> 0, 'Unable to load libwebp_debug.dll or libsharpyuv_debug.dll from path ' + ExtractFilePath(Application.ExeName));
  //if DLL = 0 then showmessage('hhh');

  WebPConfigInitInternal := GetProcAddress(DLL, PAnsiChar('WebPConfigInitInternal'));
  WebPPictureInitInternal := GetProcAddress(DLL, PAnsiChar('WebPPictureInitInternal'));
  WebPMemoryWrite := GetProcAddress(DLL, PAnsiChar('WebPMemoryWrite'));
  WebPPictureImportRGBA := GetProcAddress(DLL, PAnsiChar('WebPPictureImportRGBA'));
  WebPPictureFree := GetProcAddress(DLL, PAnsiChar('WebPPictureFree'));
  WebPEncode := GetProcAddress(DLL, PAnsiChar('WebPEncode'));
  WebPDecodeRGBAInto := GetProcAddress(DLL, PAnsiChar('WebPDecodeRGBAInto'));
  //WebPDecodeRGB := GetProcAddress(DLL, PAnsiChar('WebPDecodeRGBA'));

  //if @WebPConfigInitInternal = NIL then showmessage('configinternal');

  WebPConfigInitInternal(@Cfg, WEBP_PRESET_DEFAULT, 0, WEBP_ENCODER_ABI_VERSION);
  //exit;
  Cfg.lossless := 1;
  SetComprParams(0, 0);

  WebPPictureInitInternal(@Pic, WEBP_ENCODER_ABI_VERSION);
  with Pic do
  begin
    use_argb := 1;
    writer := WebPMemoryWrite;
    custom_ptr := @MemWr;
  end;
end;

class procedure TWebPCodec.Destroy;
begin
  FreeLibrary(DLL);
end;

class procedure TWebPCodec.SetComprParams(Quality : Single; ComprMethod : Integer);
begin
  Cfg.quality := Quality;
  Cfg.method := ComprMethod;
end;

class function TWebPCodec.CompressImage(const RGB : PByte;
    IWidth, IHeight, IStride: Integer;
    var Output : PByte; var MaxOutputSize: Integer): Integer;
//var
//    f : TFileStream;
begin
   { if (not WebPPictureInitFunc(@WebPP)) ;//return 0;  // version error
    WebPP.width = Rect.Width;
    WebPP.height = Rect.Height;
    if (not WebPPictureAllocFunc(@WebPP)) ;//return 0;   // memory error

    if WebPEncodeFunc(&config, &pic) = 0 then ;// error
    WebPPictureFreeFunc(@WebPP);

  if (!WebPConfigPreset(&config, WEBP_PRESET_DEFAULT, quality_factor) ||
      !WebPPictureInit(&pic))
    return 0;  // shouldn't happen, except if system installation is broken
  }
  WebPPictureInitInternal(@Pic, WEBP_ENCODER_ABI_VERSION);
  with Pic do
  begin
    width := IWidth;
    height := IHeight;
    writer := WebPMemoryWrite;
    custom_ptr := @MemWr;
  //  argb := PCardinal(RGB);
  //  argb_stride := IStride;
  //  memory_argb_ := RGB;
  end;

  Cfg.lossless := 1;


  with Pic do
  begin
    use_argb := 1;
    writer := WebPMemoryWrite;
    custom_ptr := @MemWr;
  end;

  with MemWr do
  begin
    mem := Output;
    size := 0;
    max_size := MaxOutputSize;

    WebPPictureImportRGBA(@Pic, RGB, IStride);

    with Pic do
    begin
      use_argb := 1;
      writer := WebPMemoryWrite;
      custom_ptr := @MemWr;
    end;


    Result := WebPEncode(@Cfg, @Pic);
    WebPPictureFree(@Pic);

    if Result = 0 then exit; // error in WebPEncode

    Output := mem;
    MaxOutputSize := max_size;
    Result := size;
  //  f := TFileStream.Create('d:\out\f' + IntTOStr(random(100000)) + '.webp', fmCreate);
  //  f.Write(mem^, size);
  //  f.Free;
  end;

  (* WebPPicture pic;
    WebPConfig config;
    WebPMemoryWriter wrt;
    int ok;

    if (!WebPConfigPreset(&config, WEBP_PRESET_DEFAULT, 100) ||
            !WebPPictureInit(&pic))
    {
        return 0;
    }

    config.lossless = true;
    config.method = 6;
    pic.use_argb = true;
    pic.width = width;
    pic.height = height;
    pic.writer = WebPMemoryWrite;
    pic.custom_ptr = &wrt;
    WebPMemoryWriterInit(&wrt);

    ok = WebPPictureImportRGBA(&pic, rgba, width * 4) &&
         WebPEncode(&config, &pic);
    WebPPictureFree(&pic);
    if (!ok)
        return 0;
    *output = wrt.mem;
    return wrt.size; *)
end;

class procedure TWebPCodec.DeCompressImage(const Data: PByte; DataSize: size_t;
                           Output: PByte; Size: size_t; Stride: Integer);
var
  p, p2 : pbyte;
  i, w, h : Integer;
  aaa : array of byte;
    f : TFileStream;
begin
   f := TFileStream.Create('d:\out\f' + IntTOStr(random(100000)) + '.webp', fmCreate);
   f.Write(Data^, datasize);
    f.Free;
  //SetLength(aaa, 1 shl 25);
  WebPDecodeRGBAInto(Data, DataSize, Output, Size, Stride);
  // Output{@aaa[0]}, 1 shl 25{Size}, -5120{Stride});
  //SetLength(aaa, 0);
  {exit;
  p2 := output;
  p := WebPDecodeRGB(Data, DataSize, @w, @h);
  for i := 0 to h - 1 do
  begin
    move(p^, p2^, w * 4);
    Inc(p, w * 4);
    Inc(p2, Stride);
  end;
  //FreeMem(p);    }
end;


{class function TWebPCodec.GetComprData : PByte;
begin
  Result := MemWr.mem;
end;}

initialization

TWebPCodec.Create;

finalization

TWebPCodec.Destroy;

end.

