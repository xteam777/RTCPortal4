{ Copyright (c) Danijel Tkalcec,
  RealThinClient components - http://www.realthinclient.com }

unit rtcScrPlayback;

interface

{$INCLUDE rtcPortalDefs.inc}
{$INCLUDE rtcDefs.inc}

uses
  Windows,
  Classes,
  SysUtils,
  Graphics,
  Forms,

  rtcSystem,
  rtcInfo,
  rtcZLib,

  IniFiles, System.SyncObjs,
  rtcCompress, Vcl.Imaging.JPEG, Vcl.Imaging.PNGImage, WebPCodec,
  Math;

type
  TRtcScreenDecoder = class
  type
    TWebPDecodeRGBIntoFunc = function (const data: PByte; data_size: Cardinal;
      output_buffer: PByte; output_buffer_size, output_stride: Integer): PByte;
      cdecl;

  private
   // FBytesPerPixel: byte;
    TempBuff: RtcByteArray;
    CS : TCriticalSection;

    FScreenWidth, FScreenHeight, FScreenBPP,

      FBPPWidth, FBlockSize: integer;

    FImage: TBitmap;

    function CreateBitmap: TBitmap;

  protected
    procedure PrepareStorage;
    procedure ReleaseStorage;

    procedure SetScreenInfo(const Info: TRtcRecord);
    procedure SetPalette(const s: RtcByteArray);

    procedure DrawMovedRects(Rects : TRtcArray);
    procedure DrawDirtyRects(Rects : TRtcArray);

    procedure DecompressBlock(const Offset: longint; const s: RtcByteArray);
    procedure DecompressBlock2(const Offset: longint; const s: RtcByteArray);
    procedure DecompressBlock3(const Offset: longint; const s: RtcByteArray);

  public
    constructor Create;
    destructor Destroy; override;

    function SetScreenData(const Data: TRtcRecord): boolean;

    property Image: TBitmap read FImage;
  end;

  TRtcScreenPlayback = class
  private
    ScrOut: TRtcScreenDecoder;
    FCursorVisible: boolean;
    FCursorHotX: integer;
    FCursorHotY: integer;
    FCursorX: integer;
    FCursorY: integer;
    FCursorShape: integer;
    FCursorStd: boolean;
    FCursorImage: TBitmap;
    FCursorMask: TBitmap;
    FCursorOldY: integer;
    FCursorOldX: integer;
    FCursorUser: String;
    FLoginUserName: String;

    function GetScreen: TBitmap;

  public
    constructor Create; virtual;
    destructor Destroy; override;

    function PaintScreen(const s: RtcString): boolean;
    function PaintCursor(const s: RtcString): boolean;

    property Image: TBitmap read GetScreen;

    property LoginUserName: String read FLoginUserName write FLoginUserName;
    property CursorVisible: boolean read FCursorVisible;
    property CursorOldX: integer read FCursorOldX;
    property CursorOldY: integer read FCursorOldY;
    property CursorX: integer read FCursorX;
    property CursorY: integer read FCursorY;
    property CursorHotX: integer read FCursorHotX;
    property CursorHotY: integer read FCursorHotY;
    property CursorImage: TBitmap read FCursorImage;
    property CursorMask: TBitmap read FCursorMask;
    property CursorShape: integer read FCursorShape;
    property CursorStd: boolean read FCursorStd;
    property CursorUser: String read FCursorUser;
  end;

implementation

{ Helper Functions }

function BitmapDataPtr(const Image: TBitmap): pointer;
begin
  With Image do
  begin
    if Height < 2 then
      Result := ScanLine[0]
    else if Cardinal(ScanLine[0]) < Cardinal(ScanLine[1]) then
      Result := ScanLine[0]
    Else
      Result := ScanLine[Height - 1];
  End;
end;

function BitmapDataPtr2(const Image: TBitmap; Offset: longint): pointer;
begin
  With Image do
    Result := pointer(longint(ScanLine[0]) + Offset);
end;

{ - TRtcScreenDecoder - }

constructor TRtcScreenDecoder.Create;
begin
  inherited;
  FImage := nil;
  SetLength(TempBuff, 0);

  CS := TCriticalSection.Create;
end;

destructor TRtcScreenDecoder.Destroy;
begin
  ReleaseStorage;
  inherited;

  CS.Free;
end;

procedure TRtcScreenDecoder.SetScreenInfo(const Info: TRtcRecord);
begin
  FScreenWidth := Info.asInteger['Width'];
  FScreenHeight := Info.asInteger['Height'];
  FScreenBPP := Info.asInteger['Bits'];
  //FBytesPerPixel := Info.asInteger['Bytes'];

 // if FBytesPerPixel = 0 then
  FBPPWidth := (FScreenWidth * FScreenBPP) shr 3;
  if (FScreenWidth * FScreenBPP) mod 8 <> 0 then Inc(FBPPWidth);

 // else
 //   FBPPWidth := FBytesPerPixel * FScreenWidth;

  FBlockSize := FBPPWidth * FScreenHeight;

  PrepareStorage;
end;

procedure TRtcScreenDecoder.PrepareStorage;
begin
  ReleaseStorage;

  FImage := CreateBitmap;
  SetLength(TempBuff, 8192 * 4 * 2);
end;

procedure TRtcScreenDecoder.ReleaseStorage;
begin
  if assigned(FImage) then
  begin
    SetLength(TempBuff, 0);
    FImage.Free;
    FImage := nil;
  end;
end;

function TRtcScreenDecoder.CreateBitmap: TBitmap;
begin
  Result := TBitmap.Create;
  With Result do
  Begin
    case FScreenBPP of
      4:
        PixelFormat := pf4bit;
      8:
        PixelFormat := pf8bit;
      16:
        PixelFormat := pf16bit;
      24:
        PixelFormat := pf24bit;
      32:
        PixelFormat := pf32bit;
    End;
    Width := FScreenWidth;
    Height := FScreenHeight;
  End;
end;

procedure TRtcScreenDecoder.SetPalette(const s: RtcByteArray);
var
  lpPal: PLogPalette;
  myPal: HPALETTE;
begin
  if not assigned(FImage) then
    Exit;
  if length(s) = 0 then
    Exit;

  lpPal := @s[0];
  myPal := CreatePalette(lpPal^);

  with FImage do
  begin
    Canvas.Lock;
    try
      Palette := myPal;
    finally
      Canvas.Unlock;
    end;
  end;
end;

function TRtcScreenDecoder.SetScreenData(const Data: TRtcRecord): boolean;
var
  a: integer;
  Scr, Atr: TRtcArray;
begin
  Result := False;
  if assigned(Data) then
  begin
    if Data.isType['res'] = rtc_Record then
    begin
      SetScreenInfo(Data.asRecord['res']);
      Result := True;
    end;

    if Data.isType['pal'] = rtc_String then
    begin
      SetPalette(RtcStringToBytes(Data.asString['pal']));
      Result := True;
    end;

    if not assigned(FImage) then
      Exit;

    if Data.isType['di'] = rtc_Array then
    begin
      Scr := Data.asArray['di'];
      Atr := Data.asArray['at'];
      if Scr.Count > 0 then
      begin
        Result := True;
        for a := 0 to Scr.Count - 1 do
          DecompressBlock3(Atr.asInteger[a], RtcStringToBytes(Scr.asString[a]));
      end;
    end
    else if Data.isType['pu'] = rtc_Array then
    begin
      Scr := Data.asArray['pu'];
      Atr := Data.asArray['at'];
      if Scr.Count > 0 then
      begin
        Result := True;
        for a := 0 to Scr.Count - 1 do
          DecompressBlock3(Atr.asInteger[a], RtcStringToBytes(Scr.asString[a]));
      end;
    end
    else if Data.isType['diff'] = rtc_Array then
    begin
      Scr := Data.asArray['diff'];
      Atr := Data.asArray['at'];
      if Scr.Count > 0 then
      begin
        Result := True;
        for a := 0 to Scr.Count - 1 do
          DecompressBlock2(Atr.asInteger[a], RtcStringToBytes(Scr.asString[a]));
      end;
    end
    else if Data.isType['put'] = rtc_Array then
    begin
      Scr := Data.asArray['put'];
      Atr := Data.asArray['at'];
      if Scr.Count > 0 then
      begin
        Result := True;
        for a := 0 to Scr.Count - 1 do
          DecompressBlock2(Atr.asInteger[a], RtcStringToBytes(Scr.asString[a]));
      end;
    end;

    if Data.isType['scrmr'] = rtc_Array then  // Screen Move Rects
      DrawMovedRects(Data.asArray['scrmr']);

      if Data.isType['scrdr'] = rtc_Array then  // Screen Dirty Rects
        DrawDirtyRects(Data.asArray['scrdr']);
  end;
end;

procedure TRtcScreenDecoder.DrawMovedRects(Rects : TRtcArray);
var
  i, Left, Top, Right, Bottom, PointX, PointY : integer;
begin
  for i := 0 to Integer(Rects.Count) - 1 do
    with Rects.asRecord[i] do
    begin
      Left := asInteger['Left']; Top := asInteger['Top'];
      Right := asInteger['Right']; Bottom := asInteger['Bottom'];
      PointX := asInteger['PointX']; PointY := asInteger['PointY'];

      FImage.Canvas.CopyRect(TRect.Create(Left, Top, Right, Bottom), FImage.Canvas,
        TRect.Create(PointX, PointY, PointX + Right - Left, PointY + Bottom - Top));
    end
end;

procedure TRtcScreenDecoder.DrawDirtyRects(Rects : TRtcArray);
//const Left, Top, Width, Height, CodecId : Integer;
 //     MS : RtcByteStream);

var
  DataPos, ImagePos : PByte;
  RowSize, ScreenRowSize : Integer;

  Left, Top, Width, Height, CodecId : Integer;
  MS : RtcByteStream;
  i, RectId, RowId : Integer;
 // s : RTCByteArray;
  JPG : TJPEGImage;
  PNG : TPNGImage;
  MS2 : TMemoryStream;
  TmpBuff : array of byte;
begin
 // FImage.Canvas.Lock;
 //  CS.Enter;
  for i := 0 to Integer(Rects.Count) - 1 do
    with Rects.asRecord[i] do
    begin
       // IniF := TIniFile.Create(ExtractFilePath(Application.ExeName) + 'Settings.ini');
      //  CompressionType := IniF.ReadInteger('ScreenCapture', 'CompressionType', 0);
      //  IniF.Free;
      Left := asInteger['Left']; Top := asInteger['Top'];
      Width := asInteger['Width']; Height := asInteger['Height'];
      CodecId := asInteger['Codec'];
      MS := RTCByteStream(asByteStream['Data']);

    //  MS.Position := 0;
      MS2 := NIL;

      if CodecId = 4 then
      begin
        if (Height < 2) or (Cardinal(FImage.ScanLine[0]) <
           Cardinal(FImage.ScanLine[1])) then ScreenRowSize := 1 else
           ScreenRowSize := -1;
        ImagePos := PByte(FImage.ScanLine[0]);
        ScreenRowSize := ScreenRowSize * ((FImage.Width * FSCreenBPP) shr 3);
        Inc(ImagePos, Top * ScreenRowSize + ((Left * FScreenBPP) shr 3));

        //MS.Position := 0;
        //MS.SaveToFile('D:\1.webp');
        TWebPCodec.DeCompressImage(MS.Memory, MS.Size, ImagePos,// PByte(FImage.ScanLine[0]),//ImagePos,
          Height * ((FImage.Width * FSCreenBPP) shr 3), ScreenRowSize);

       (*SetLength(TmpBuff, Width * Height * 5);

       TWebPCodec.DeCompressImage(MS.Memory, MS.Size, @TmpBuff[0],//ImagePos,// PByte(FImage.ScanLine[0]),//ImagePos,
          Height * ((FImage.Width * FSCreenBPP) shr 3),
          {ScreenRowSize}(Width * FSCreenBPP) shr 3);

        if (Height < 2) or (Cardinal(FImage.ScanLine[0]) <
           Cardinal(FImage.ScanLine[1])) then ScreenRowSize := 1 else
           ScreenRowSize := -1;
         ImagePos := PByte(FImage.ScanLine[0]);
         ScreenRowSize := ScreenRowSize * ((FImage.Width * FSCreenBPP) shr 3);
         Inc(ImagePos, Top * ScreenRowSize + ((Left * FScreenBPP) shr 3));
         DataPos := @TmpBuff[0];
         RowSize := ((Width * FScreenBPP) shr 3);
         for RowId := 0 to Height - 1 do
         begin
           Move(DataPos^, ImagePos^, RowSize);
           Inc(ImagePos, ScreenRowSize);
           Inc(DataPos, RowSize);
         end;

         SetLength(TmpBuff, 0); *)



          //(FImage.Width * FSCreenBPP) shr 3);
     //   WebPDecodeRGBIntoFunc(MS.Memory, MS.Size, ImagePos,
       //   Height * ((FImage.Width * FSCreenBPP) shr 3),
         // (FImage.Width * FSCreenBPP) shr 3);

  //      FImage.Canvas.Unlock;
      end;

      if CodecId = 3 then
      begin
        PNG := TPNGImage.Create;
        PNG.LoadFromStream(MS);
        PNG.Transparent := false;
        //JPG.SaveToFile('d:\aaa.jpg');
       // JPG.DIBNeeded;
        //PNG.DrawUsingPixelInformation(FImage.Canvas, TPoint.Create(Left, Top));
      //  FImage.Canvas.Lock;
        PNG.Draw(FImage.Canvas, TRect.Create(Left, Top,
          Left + Width, Top + Height));
       // FImage.Canvas.UnLock;
        PNG.Free;
      end;

      if CodecId = 2 then
      begin
        JPG := TJPEGImage.Create;
        JPG.Scale := jsFullSize;
        JPG.LoadFromStream(MS);
        //JPG.SaveToFile('d:\aaa.jpg');
       // JPG.DIBNeeded;
        FImage.Canvas.Draw(Left, Top, JPG);
        JPG.Free;
      end;

     if CodecId = 1 then
     begin
      //s := NIL;
      //SetLength(s, (Width * Height * FSCreenBPP) shr 3);
      MS2 := TMemoryStream.Create;
      MS2.SetSize((Width * Height * FSCreenBPP) shr 3);
      DWordDecompress(MS.Memory, MS2.Memory, 0, MS.Size, MS2.Size);
      MS := MS2;
      //SetLength(s, 0);
     //  s := s2;
     end;

     if CodecId < 2 then
     begin
      //Width, 100; Height := 100;
         if (Height < 2) or (Cardinal(FImage.ScanLine[0]) <
           Cardinal(FImage.ScanLine[1])) then ScreenRowSize := 1 else
           ScreenRowSize := -1;
         ImagePos := PByte(FImage.ScanLine[0]);
         ScreenRowSize := ScreenRowSize * ((FImage.Width * FSCreenBPP) shr 3);
         Inc(ImagePos, Top * ScreenRowSize + ((Left * FScreenBPP) shr 3));
         DataPos := MS.Memory;
         RowSize := ((Width * FScreenBPP) shr 3);
         for RowId := 0 to Height - 1 do
         begin
           Move(DataPos^, ImagePos^, RowSize);
           Inc(ImagePos, ScreenRowSize);
           Inc(DataPos, RowSize);
         end;
     end;
    if Assigned(MS2) then MS2.Free;
  end;

 // CS.Leave;
 // FImage.Canvas.UnLock;

 // if CompressionType = 1 then setlength(S, 0);


  //Image.SaveToFile('d:\aaa.bmp')
end;


procedure TRtcScreenDecoder.DecompressBlock(const Offset: longint;
  const s: RtcByteArray);
begin
  if length(s) > 0 then
    if not DWordDecompress(Addr(s[0]), BitmapDataPtr(FImage), Offset, length(s),
      FBlockSize - Offset) then
      raise Exception.Create('Error decompressing image');
end;

procedure TRtcScreenDecoder.DecompressBlock2(const Offset: longint;
  const s: RtcByteArray);
begin
  if length(s) > 0 then
    if not DWordDecompress(Addr(s[0]), BitmapDataPtr2(FImage, Offset), 0,
      length(s), FBlockSize - Offset) then
      raise Exception.Create('Error decompressing image');
end;

procedure TRtcScreenDecoder.DecompressBlock3(const Offset: longint;
  const s: RtcByteArray);
begin
  if length(s) > 0 then
    if not DWordDecompress_New(Addr(s[0]), BitmapDataPtr2(FImage, Offset),
      Addr(TempBuff[0]), 0, length(s), FBlockSize - Offset) then
      raise Exception.Create('Error decompressing image');
end;

{ - TRtcScreenPlayback - }

constructor TRtcScreenPlayback.Create;
begin
  inherited;
  ScrOut := TRtcScreenDecoder.Create;
  FCursorVisible := False;
  FLoginUserName := '';
end;

destructor TRtcScreenPlayback.Destroy;
begin
  if assigned(FCursorImage) then
  begin
    FCursorImage.Free;
    FCursorImage := nil;
  end;
  if assigned(FCursorMask) then
  begin
    FCursorMask.Free;
    FCursorMask := nil;
  end;
  ScrOut.Free;
  inherited;
end;

function TRtcScreenPlayback.PaintScreen(const s: RtcString): boolean;
var
  rec: TRtcRecord;
begin
  if s = '' then
  begin
    Result := False;
    Exit;
  end;
  rec := TRtcRecord.FromCode(s);
  try
    Result := ScrOut.SetScreenData(rec);
  finally
    rec.Free;
  end;
end;

function TRtcScreenPlayback.GetScreen: TBitmap;
begin
  Result := ScrOut.Image;
end;

function TRtcScreenPlayback.PaintCursor(const s: RtcString): boolean;
var
  rec: TRtcRecord;
  icinfo: TIconInfo;
  hc: HICON;
begin
  Result := False;
  if s = '' then
    Exit;

  rec := TRtcRecord.FromCode(s);
  try
    if (rec.isType['X'] <> rtc_Null) or (rec.isType['Y'] <> rtc_Null) then
    begin
      if FCursorVisible then
      begin
        FCursorOldX := FCursorX;
        FCursorOldY := FCursorY;
      end
      else
      begin
        FCursorOldX := rec.asInteger['X'];
        FCursorOldY := rec.asInteger['Y'];
      end;
      FCursorX := rec.asInteger['X'];
      FCursorY := rec.asInteger['Y'];
      if FCursorUser <> rec.asText['U'] then
        Result := True // changing user
      else
        Result := (FCursorX <> FCursorOldX) or (FCursorY <> FCursorOldY);
      FCursorUser := rec.asText['U'];
    end;
    if (rec.isType['V'] <> rtc_Null) and (rec.asBoolean['V'] <> FCursorVisible)
    then
    begin
      Result := True;
      FCursorVisible := rec.asBoolean['V'];
    end;
    if rec.isType['C'] <> rtc_Null then
    begin
      if not FCursorStd or (FCursorShape <> -rec.asInteger['C']) then
      begin
        Result := True;
        FCursorShape := -rec.asInteger['C'];
        FCursorStd := True;

        hc := Screen.Cursors[FCursorShape];
        if GetIconInfo(hc, icinfo) then
        begin
          FCursorHotX := icinfo.xHotspot;
          FCursorHotY := icinfo.yHotspot;

          if assigned(FCursorImage) then
          begin
            FCursorImage.Free;
            FCursorImage := nil;
          end;
          if assigned(FCursorMask) then
          begin
            FCursorMask.Free;
            FCursorMask := nil;
          end;

          if icinfo.hbmColor <> INVALID_HANDLE_VALUE then
          begin
            FCursorImage := TBitmap.Create;
            FCursorImage.Handle := icinfo.hbmColor;
          end;

          if icinfo.hbmMask <> INVALID_HANDLE_VALUE then
          begin
            FCursorMask := TBitmap.Create;
            FCursorMask.Handle := icinfo.hbmMask;
            FCursorMask.PixelFormat := pf4bit;
          end;
        end;
      end;
    end
    else if rec.isType['HX'] <> rtc_Null then
    begin
      Result := True;
      FCursorShape := 0;
      FCursorStd := False;

      FCursorHotX := rec.asInteger['HX'];
      FCursorHotY := rec.asInteger['HY'];

      if assigned(FCursorImage) then
      begin
        FCursorImage.Free;
        FCursorImage := nil;
      end;
      if assigned(FCursorMask) then
      begin
        FCursorMask.Free;
        FCursorMask := nil;
      end;

      if (rec.isType['I'] = rtc_ByteStream) then
      begin
        FCursorImage := TBitmap.Create;
        FCursorImage.LoadFromStream(rec.asByteStream['I']);
      end;

      if (rec.isType['M'] = rtc_ByteStream) then
      begin
        FCursorMask := TBitmap.Create;
        FCursorMask.LoadFromStream(rec.asByteStream['M']);
      end;
    end;
  finally
    rec.Free;
  end;
end;

end.
